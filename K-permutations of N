K-permutations of N

Write a program to print K permutations of N
Input: First line is number of testcase. Each testcase contain 2 number N, K



Input:
1
4 2



Output:
#1
1 2
1 3
1 4
2 1
2 3
2 4
3 1
3 2
3 4
4 1
4 2
4 3


ALL INPUT:
10
5 3
4 2
6 2
7 5
8 3
9 4
10 3
5 2
7 3
8 2







/////SOLUTIONS

#define bitts <bits/stdc++.h>
#include bitts
 
/*
#include<iostream>
#include<vector>
#include<algorithm>
*/
 
using namespace std;
 
int n, k;
vector<int> mat;
int vis[10000] = { 0 };
 
void perm(int n, int k, int idx,vector<int> s)
{
    if (idx == k)
    {
        for (int i = 0; i < s.size(); i++)
            cout << s[i] << " ";
        cout << endl;
        return;     
    }
 
    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            vis[i] = 1;
            s.push_back(mat[i]);
            perm(n, k, idx + 1, s);
            s.pop_back();
            vis[i] = 0;
        }
    }
}
 
int main(int argc, char** argv)
{
    int test_case;
    int T;
 
    //freopen("input.txt", "r", stdin);
    cin >> T;
 
     
    for (test_case = 1; test_case <= T; ++test_case)
    {
        cin >> n >> k;
        for (int i = 1; i <= n; i++)
        {
            mat.push_back(i);
            vis[i] = 0;
        }
 
        vector<int> s;
         
         
        cout<<"#"<<test_case<<endl;
        perm(n, k, 0,s);
 
    }
    return 0;//Your program should return 0 on normal termination.
}






//TWO SOLUTION MENTIONED HERE
#include<iostream>
#define def <bits/stdc++.h>
#include def
using namespace std;

vector<vector<int>>ans;
vector<int> vis;
vector<int> v;
int n ,k;

void combination(int index, vector<int> &temp)
{
    if(temp.size()==k)
    {
        ans.push_back(temp);
        return;
    }
    {
        for(int i=0; i<n; i++)
        {
            if(vis[i]==0)
            {
                vis[i] =1;
                temp.push_back(v[i]);
                combination(index+1, temp);
                temp.pop_back();
                vis[i]=0;
            }
        }
    }
}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	cin>>T;

	for(test_case = 1; test_case <= T; ++test_case)
	{
        cin>>n>>k;
        vis.clear();
        v.clear();
        ans.clear();
        vis.push_back(0);
        for(int i=1; i<=n; i++)
        {
            v.push_back(i);
            vis.push_back(0);
        }
        vector<int> temp;
               
        combination(0, temp);
        
        cout << "#" << test_case << endl;
        for (int i = 0; i < ans.size(); i++)
        {
            for (int j = 0; j < k; j++)
            {
                cout << ans[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
}





/*
#include<iostream>
#define def <bits/stdc++.h> 
#include def

using namespace std;
int N, K;
int input[10];
string s;
vector<int> ans;

void print()
{
    int temp=0;
        for(int j=0; j<K; j++)
        {
            temp = temp*10 + input[j];
            
        }
    ans.push_back(temp);
    
}

void combination(int index)
{
    if(index==N)
    {
        print();
        return;
        
    }
    else
    {
        for(int i=index; i<N; i++)
        {
            swap(input[i], input[index]);
            combination(index+1);
            swap(input[i], input[index]);
            
        }
    }
}


int main(int argc, char** argv)
{
	int test_case;
	int T;

	cin>>T;

	for(test_case = 1; test_case <= T; ++test_case)
	{
        cin>>N>>K;
        for(int i=0; i<N; i++)
            input[i] = i+1;
        ans.clear();
        combination(0);
        
        
        vector<int>::iterator ip;
  
    // Using std::unique
    ip = std::unique(ans.begin(), ans.end());
    // Now v becomes {1 3 10 1 3 7 8 * * * * *}
    // * means undefined
  
    // Resizing the vector so as to remove the undefined terms
    ans.resize(std::distance(ans.begin(), ip));
        //for(int i=0; i<ans.size(); i++)
          //  cout<<ans[i]<<" ";
        //cout<<endl;
        sort(ans.begin(), ans.end());
     //    for(int i=0; i<ans.size(); i++)
       //     cout<<ans[i]<<" ";
  
    // Displaying the vector after applying std::unique
        cout<<"#"<<test_case<<endl;
    for (ip = ans.begin(); ip != ans.end(); ++ip) {
            int number = *ip;
        vector<int>val;
            while (number > 0)
				{
  				  int digit = number%10;
  				  number /= 10;
                val.push_back(digit);
               
   				 //print digit
				}
        for(int i=val.size()-1; i>=0; i--)
            cout<<val[i]<<" ";
        cout<<endl;
        }


	}
	return 0;//Your program should return 0 on normal termination.
}


*/
